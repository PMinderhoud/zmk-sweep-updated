#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Global settings */

#define QUICK_TAP_MS 175
#define KEYS_L 4 3 2 1 0 14 13 12 11 10 24 23 22 21 20  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29  // right-hand keys
#define THUMBS 30 31 32 33                                              // thumb keys

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        easynew: easynew {
            compatible = "zmk,behavior-mod-morph";
            label = "EASYNEW";
            bindings = <&kp LC(N)>, <&kp N>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL)>;
        };

        easyclose: easyclose {
            compatible = "zmk,behavior-mod-morph";
            label = "EASYCLOSE";
            bindings = <&kp LC(F4)>, <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_RALT|MOD_LALT)>;
        };

        qutap: qutap {
            compatible = "zmk,behavior-tap-dance";
            label = "QUTAP";
            #binding-cells = <0>;
            bindings = <&qumacro>, <&kp Q>;

            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
            layers = <1 0 2>;
        };

        u_caret {
            bindings = <&cmp CARET U>;
            key-positions = <15 25>;
            layers = <4>;
        };

        o_caret {
            bindings = <&cmp CARET O>;
            key-positions = <16 26>;
            layers = <4>;
        };

        e_caret {
            bindings = <&cmp CARET E>;
            key-positions = <17 27>;
            layers = <4>;
        };

        a_caret {
            bindings = <&cmp CARET A>;
            key-positions = <18 28>;
            layers = <4>;
        };

        i_caret {
            bindings = <&cmp CARET I>;
            key-positions = <19 29>;
            layers = <4>;
        };

        uu_caret {
            bindings = <&cmpu CARET U>;
            key-positions = <15 25>;
            layers = <5>;
        };

        ou_caret {
            bindings = <&cmpu CARET O>;
            key-positions = <16 26>;
            layers = <5>;
        };

        eu_caret {
            bindings = <&cmpu CARET E>;
            key-positions = <17 27>;
            layers = <5>;
        };

        au_caret {
            bindings = <&cmpu CARET A>;
            key-positions = <18 28>;
            layers = <5>;
        };

        iu_caret {
            bindings = <&cmpu CARET I>;
            key-positions = <19 29>;
            layers = <5>;
        };

        Semicolon {
            bindings = <&kp SEMI>;
            key-positions = <27 28>;
            layers = <0 2>;
        };

        exclaim {
            bindings = <&kp EXCL>;
            key-positions = <26 27>;
        };

        dquot {
            bindings = <&kp DQT>;
            key-positions = <27 28>;
            layers = <1 3>;
        };

        dquot_alt {
            bindings = <&kp DQT>;
            key-positions = <5 6>;
            layers = <0 2>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <23 22>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <22 21>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <20 21>;
        };

        backslash {
            bindings = <&kp BSLH>;
            key-positions = <29 28>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <30 31>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <32 33>;
        };

        isnot {
            bindings = <&isnot>;
            key-positions = <10 13>;
            layers = <3>;
        };

        lambda {
            bindings = <&lambda>;
            key-positions = <13 12>;
            layers = <3>;
        };

        lambdablk {
            bindings = <&lambdablk>;
            key-positions = <13 12 11>;
            layers = <3>;
        };

        ampersand {
            bindings = <&kp AMPS>;
            key-positions = <14 13>;
            layers = <3>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 16>;
            layers = <3>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <1 0 2 3>;
        };

        LeftBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <11 1>;
            layers = <1 0 2 3>;
        };

        RightBrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <18 8>;
            layers = <1 0 2 3>;
        };

        LeftPar {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 2>;
            layers = <1 0 2 3>;
        };

        RightPar {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <17 7>;
            layers = <1 0 2 3>;
        };

        LeftBrac {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 13>;
            layers = <1 0 2 3>;
        };

        RightBrac {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <16 6>;
            layers = <1 0 2 3>;
        };

        ZeroZero {
            bindings = <&zerozero>;
            key-positions = <18 19>;
            layers = <3>;
        };

        ZeroZeroZero {
            bindings = <&zerozerozero>;
            key-positions = <17 18 19>;
            layers = <3>;
        };
    };

    macros {
        smile: smile {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp COLON &kp MINUS &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "SMILE";
        };

        cmp: comp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&kp RALT &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "COMP";
        };

        cmpu: compup {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&kp RALT &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;

            label = "COMPUP";
        };

        isnot: isnot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp I &kp S &kp SPACE &kp N &kp O &kp T &kp SPACE>;
            label = "ISNOT";
        };

        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp GT &kp SPACE>;
            label = "LAMBDA";
        };

        lambdablk: lambdablk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&lambda &kp LBRC &kp ENTER>;
            label = "LAMBDABLK";
        };

        zerozero: zerozero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0>;
            label = "ZEROZERO";
        };

        zerozerozero: zerozerozero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0>;
            label = "ZEROZEROZERO";
        };

        qumacro: QuMacro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp Q>,
                <&macro_release>,
                <&kp LSHFT &kp RSHFT>,
                <&macro_tap>,
                <&kp U>;

            label = "QUMacro";
            wait-ms = <10>;
            tap-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        semimak_layer {
            /* Semimak JQZ
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   F  |   L  |   H  |   V  |   X  |                      |   '  |   W  |   U  |   O  |   Y  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   S  |   R  |   N  |   T  |   K  |                      |   C  |   D  |   E  |   A  |   I  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   Z  |   J  |   B  |   M  |   Q  |                      |   P  |   G  |   ,  |   .  |   /  |
 * `----------------------------------'                      `----------------------------------'
 *                      ,--------------.                     ,------------.  
 *                      | SPACE | TAB  |                     | ENTER | BS |  
 *                      `--------------'                     `------------'  
 */

            bindings = <
&kp F        &kp L        &kp H         &kp V          &kp X          &kp SQT        &kp W         &kp U         &kp O        &kp Y
&hml LGUI S  &hml LALT R  &hml LCTRL N  &hml LSHFT T   &kp K          &kp C          &hmr RSHFT D  &hmr RCTRL E  &hmr RALT A  &hmr RGUI I
&lt 8 Z    &kp J        &kp B         &kp M          &qutap         &kp P          &kp G         &kp COMMA     &kp DOT      &kp FSLH
                                        &lt 7 SPACE  &lt 4 TAB    &lt 6 ENTER  &lt 3 BSPC
            >;
        };

        recurva_layer {
            /* Recurva colstag 1 
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   F  |   R  |   D  |   P  |   V  |                      |   Q  |   M  |   U  |   O  |   Y  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   S  |   N  |   T  |   C  |   B  |                      |   .  |   H  |   E  |   A  |   I  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   Z  |   X  |   K  |   G  |   W  |                      |   J  |   L  |   ;  |   '  |   ,  |
 * `----------------------------------'                      `----------------------------------'
 *                      ,--------------.                     ,------------.  
 *                      | SPACE | TAB  |                     | ENTER | BS |  
 *                      `--------------'                     `------------'  
 */

            bindings = <
&kp F        &kp R        &kp D         &kp P          &kp V          &qutap         &kp M         &kp U         &kp O        &kp Y
&hml LGUI S  &hml LALT N  &hml LCTRL T  &hml LSHFT C   &kp B          &kp DOT        &hmr RSHFT H  &hmr RCTRL E  &hmr RALT A  &hmr RGUI I
&lt 8 Z    &kp X        &kp K         &kp G          &kp W          &kp J          &kp L         &kp SEMI      &kp SQT      &kp COMMA
                                        &lt 7 SPACE  &lt 4 TAB    &lt 6 ENTER  &lt 3 BSPC
            >;
        };

        qwerty_layer {
            bindings = <
&qumacro     &kp W        &kp E         &kp R          &kp T          &kp Y          &kp U         &kp I         &kp O        &kp P
&hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F   &kp G          &kp H          &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI
&lt 8 Z    &kp X        &kp C         &kp V          &kp B          &kp N          &kp M         &kp COMMA     &kp DOT      &kp FSLH
                                        &lt 7 SPACE  &lt 4 TAB    &lt 6 ENTER  &lt 3 BSPC
            >;
        };

        sym_layer {
            bindings = <
&kp LS(PRCNT)      &kp LS(PLUS)  &kp MINUS      &kp LS(DLLR)      &kp LS(LBRC)    &kp LS(RBRC)  &kp N7  &kp N8  &kp N9  &kp LS(AT)
&hml LWIN EXCL     &hml LALT LT  &hml LCTRL GT  &hml LSHFT EQUAL  &kp LS(LPAR)    &kp LS(RPAR)  &kp N1  &kp N2  &kp N3  &kp N0
&lt 8 LS(CARET)  &kp LS(STAR)  &kp FSLH       &kp LS(UNDER)     &kp LBKT        &kp RBKT      &kp N4  &kp N5  &kp N6  &kp DOT
                                                &trans            &trans          &trans        &trans
            >;
        };

        dia_layer {
            bindings = <
&smile LPAR  &smile PIPE  &smile RPAR  &cmp EQUAL E  &none       &cmp GRAVE U  &cmp GRAVE O  &cmp GRAVE E  &cmp GRAVE A  &cmp GRAVE I
&cmp S S     &none        &none        &mo 5       &none       &cmp DQT U    &cmp DQT O    &cmp DQT E    &cmp DQT A    &cmp DQT I
&mo 8      &none        &none        &none         &none       &cmp SQT U    &cmp SQT O    &cmp SQT E    &cmp SQT A    &cmp SQT I
                                       &trans        &tog 4    &trans        &trans
            >;
        };

        diaup_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &cmpu GRAVE U  &cmpu GRAVE O  &cmpu GRAVE E  &cmpu GRAVE A  &cmpu GRAVE I
&trans  &trans  &trans  &trans  &trans    &cmpu DQT U    &cmpu DQT O    &cmpu DQT E    &cmpu DQT A    &cmpu DQT I
&trans  &trans  &trans  &trans  &trans    &cmpu SQT U    &cmpu SQT O    &cmpu SQT E    &cmpu SQT A    &cmpu SQT I
                        &trans  &trans    &trans         &trans
            >;
        };

        function_layer {
            bindings = <
&none     &none     &none      &caps_word  &kp CAPS    &none    &kp F9  &kp F10  &kp F11  &kp F12
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &kp SLCK    &kp INS  &kp F5  &kp F6   &kp F7   &kp F8
&mo 8   &none     &none      &none       &none       &none    &kp F1  &kp F2   &kp F3   &kp F4
                               &trans      &trans      &trans   &trans
            >;
        };

        nav_layer {
            bindings = <
&kp LC(LG(LEFT))  &kp LC(LG(D))  &kp LC(LG(F4))  &kp LC(LG(RIGHT))  &kp LS(LC(ESC))    &kp LC(E)    &kp LC(LEFT)  &kp LS(F10)  &easyclose  &kp LC(RIGHT)
&kp LWIN          &kp LALT       &kp LCTRL       &kp LSHIFT         &kp LC(A)          &kp PSCRN    &kp LEFT      &kp DOWN     &kp UP      &kp RIGHT
&lt 8 LC(Z)     &kp LC(X)      &kp LC(C)       &kp LC(V)          &kp LG(V)          &kp LG(TAB)  &kp HOME      &kp PG_DN    &kp PG_UP   &kp END
                                                 &trans             &trans             &trans       &trans
            >;

            label = "nav";
        };

        adjust_layer {
            bindings = <
&bootloader   &none         &bt BT_PRV    &bt BT_NXT    &bt BT_CLR        &none     &none     &none    &none    &bootloader
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none     &to 1   &to 0  &to 2  &none
&trans        &none         &none         &none         &bt BT_CLR_ALL    &none     &none     &none    &none    &trans
                                          &tog 7      &tog 4          &tog 6  &tog 3
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
