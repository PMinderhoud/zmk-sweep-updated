#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define HRML(k1,k2,k3,k4) &ht LALT   k1 &ht LCTRL k2  &ht LGUI  k3 &ht LSHIFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHIFT k1 &ht RGUI  k2  &ht RCTRL k3 &ht RALT k4

#define LRC 0
#define LSM 1
#define LQW 2
#define LSY 3
#define LNV 4
#define LFN 5

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_caps {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        recurva_layer {
/* Recurva colstag 1 
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   F  |   R  |   D  |   P  |   V  |                      |   Q  |   M  |   U  |   O  |   Y  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   S  |   N  |   T  |   C  |   B  |                      |   .  |   H  |   E  |   A  |   I  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   Z  |   X  |   K  |   G  |   W  |                      |   J  |   L  |   ;  |   '  |   ,  |
 * `----------------------------------'                      `----------------------------------'
 *                      ,--------------.                     ,------------.  
 *                      | SPACE | TAB  |                     | BS | ENTER |  
 *                      `--------------'                     `------------'  
 */
            bindings = <
            &kp F       &kp R       &kp D       &kp P       &kp V           &kp Q    &kp M       &kp U       &kp O       &kp Y
            HRML(S,     N,          T,          C)          &kp B           &kp DOT  HRMR(H,     E,          A,          I)
            &lt LFN Z   &kp X       &kp K       &kp G       &kp W           &kp J    &kp L       &kp SEMI    &kp SQT     &kp COMMA
                                      &lt LNV TAB  &kp SPACE    &kp BSPC   &lt LSY ENTER
            >;
        };  
        semimak_layer {
/* Semimak JQZ
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   F  |   L  |   H  |   V  |   X  |                      |   '  |   W  |   U  |   O  |   Y  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   S  |   R  |   N  |   T  |   K  |                      |   C  |   D  |   E  |   A  |   I  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   Z  |   J  |   B  |   M  |   Q  |                      |   P  |   G  |   ,  |   .  |   /  |
 * `----------------------------------'                      `----------------------------------'
 *                      ,--------------.                     ,------------.  
 *                      | SPACE | TAB  |                     | BS | ENTER |  
 *                      `--------------'                     `------------'  
 */
            bindings = <
    &kp F       &kp L       &kp H       &kp V       &kp X           &kp SQT  &kp W       &kp U       &kp O       &kp Y
    HRML(S,     R,          N,          T) &kp K           &kp C    HRMR(D,     E,          A,          I)
    &lt LFN Z   &kp J       &kp B       &kp M       &kp Q           &kp P    &kp G       &kp COMMA   &kp DOT     &kp FSLH
                                      &lt LNV TAB  &kp SPACE    &kp BSPC   &lt LSY ENTER
            >;
        };  
        qwerty_layer {
            bindings = <
            &kp Q     &kp W   &kp E   &kp R        &kp T          &kp Y      &kp U      &kp I      &kp O    &kp P
            HRML(A,   S,      D,      F)           &kp G          &kp H      HRMR(J,    K,         L,       SEMI)
            &lt LFN Z &kp X   &kp C   &kp V        &kp B          &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH
                                      &lt LNV TAB  &kp SPACE    &kp BSPC   &lt LSY ENTER
            >;
        };

        sym_layer {
            bindings = <
            &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &none   &none      &none    &none    &none
            &kp N6    &kp N7    &kp N8    &kp N9    &kp N0      &none   &kp LSHIFT &kp LGUI &kp LCTL &kp LALT
            &kp GRAVE &kp BSLH  &kp EQUAL &kp LBKT  &kp RBKT    &none   &none      &none    &none    &none
                                          &kp SQT   &kp MINUS   &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
            &none    &none     &none    &none      &none        &none    &kp HOME   &kp UARW   &kp END   &kp PG_UP
            &kp LALT &kp LCTRL &kp LGUI &kp LSHIFT &none        &none    &kp LARW   &kp DARW   &kp RARW  &kp PG_DN
            &none    &none     &none    &none      &none        &none    &none      &none      &none     &none
                                        &trans     &trans       &kp DEL  &kp ESC
            >;
        };

        adjust_layer {
            bindings = <
            &bootloader &none     &kp A   &bt BT_PRV &bt BT_SEL 0     &bt BT_SEL 3  &bt BT_NXT &kp A  &none  &bootloader
            &none       &none     &none   &none      &bt BT_SEL 1     &bt BT_SEL 4  &none      &none  &none  &none
            &trans      &none     &none   &none      &bt BT_SEL 2     &bt BT_CLR    &none      &none  &none  &bt BT_CLR_ALL
                                          &none      &none            &none         &none
            >;
        };
    };
        conditional_layers {
        compatible = "zmk,conditional-layers";

        functionlayer {
            if-layers = <LSY LNV>;
            then-layer = <LFN>;
        };
    };
};